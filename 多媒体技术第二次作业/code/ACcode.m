%% ACcode函数：AC系数先做游长编码，再转为symbol1（runlength,size）和symbol2(amplitude)，然后对symbol1做哈夫曼编码
function code = ACcode(ACcoes, type)
% 亮度AC系数的哈夫曼编码表
T1 = {
    '1010' '00' '01' '100' '1011' '11010' '1111000' '11111000'  '1111110110' '1111111110000010' '1111111110000011';  
    
    '1100' '11011' '1111001' '111110110' '11111110110' '1111111110000100' '1111111110000101' '1111111110000110' '1111111110000111' '1111111110001000' '0';  
    
    '11100' '11111001' '1111110111' '111111110100' '1111111110001001' '1111111110001010' '1111111110001011' '1111111110001100' '1111111110001101' '1111111110001110' '0';  
    
    '111010' '111110111' '111111110101' '1111111110001111' '1111111110010000' '1111111110010001' '1111111110010010' '1111111110010011' '1111111110010100' '1111111110010101' '0';  
    
    '111011' '1111111000' '1111111110010110' '1111111110010111' '1111111110011000' '1111111110011001' '1111111110011010' '1111111110011011' '1111111110011100' '1111111110011101' '0';  
    
    '1111010' '11111110111' '1111111110011110' '1111111110011111' '1111111110100000' '1111111110100001' '1111111110100010' '1111111110100011' '1111111110100100' '1111111110100101' '0';  
    
    '1111011' '111111110110' '1111111110100110' '1111111110100111' '1111111110101000' '1111111110101001' '1111111110101010' '1111111110101011' '1111111110101100' '1111111110101101' '0';  
    
    '11111010' '111111110111' '1111111110101110' '1111111110101111' '1111111110110000' '1111111110110001' '1111111110110010' '1111111110110011' '1111111110110100' '1111111110110101' '0';  
    
    '111111000' '111111111000000' '1111111110110110' '1111111110110111' '1111111110111000' '1111111110111001' '1111111110111010' '1111111110111011' '1111111110111100' '1111111110111101' '0';  
    
    '111111001' '1111111110111110' '1111111110111111' '1111111111000000' '1111111111000001' '1111111111000010' '1111111111000011' '1111111111000100' '1111111111000101' '1111111111000110' '0';  
    
    '111111010' '1111111111000111' '1111111111001000' '1111111111001001' '1111111111001010' '1111111111001011' '1111111111001100' '1111111111001101' '1111111111001110' '1111111111001111' '0';  

    '1111111001' '1111111111010000' '1111111111010001' '1111111111010010' '1111111111010011' '1111111111010100' '1111111111010101' '1111111111010110' '1111111111010111' '1111111111011000' '0';  
    
    '1111111010' '1111111111011001' '1111111111011010' '1111111111011011' '1111111111011100' '1111111111011101' '1111111111011110' '1111111111011111' '1111111111100000' '1111111111100001' '0';     

    '11111111000' '1111111111100010' '1111111111100011' '1111111111100100' '1111111111100101' '1111111111100110' '1111111111100111' '1111111111101000' '1111111111101001' '1111111111101010' '0';  
    
    '1111111111101011' '1111111111101100' '1111111111101101' '1111111111101110' '1111111111101111' '1111111111110000' '1111111111110001' '1111111111110010' '1111111111110011' '1111111111110100' '0';  
    
    '11111111001' '1111111111110101' '1111111111110110' '1111111111110111' '1111111111111000' '1111111111111001' '1111111111111010' '1111111111111011' '1111111111111100' '1111111111111101' '1111111111111111'
};  
T2 = {
    '00' '01' '100' '1010' '11000' '11001' '111000' '1111000' '111110100' '1111110110' '111111110100';  
    
    '1011' '111001' '11110110' '111110101' '11111110110' '111111110101' '1111111110001000' '1111111110001001' '1111111110001010' '1111111110001011' '0';  
    
    '11010' '11110111' '1111110111' '111111110110' '111111111000010' '1111111110001100' '1111111110001101' '1111111110001110' '1111111110001111' '1111111110010000' '0';  
    
    '11011' '11111000' '1111111000' '111111110111' '1111111110010001' '1111111110010010' '1111111110010011' '1111111110010100' '1111111110010101' '1111111110010110' '0';  
    
    '111010' '111110110' '1111111110010111' '1111111110011000' '1111111110011001' '1111111110011010' '1111111110011011' '1111111110011100' '1111111110011101' '1111111110011110' '0';  
    
    '111011' '1111111001' '1111111110011111' '1111111110100000' '1111111110100001' '1111111110100010' '1111111110100011' '1111111110100100' '1111111110100101' '1111111110100010' '0';  
    
    '1111001' '11111110111' '1111111110100111' '1111111110101000' '1111111110101001' '1111111110101010' '1111111110101011' '1111111110101100' '1111111110101101' '1111111110101110' '0';  
    
    '1111010' '11111111000' '1111111110101111' '1111111110110000' '1111111110110001' '1111111110110010' '1111111110110011' '1111111110110100' '1111111110110101' '1111111110110110' '0';  
    
    '11111001' '1111111110110111' '1111111110111000' '1111111110111001' '1111111110111010' '1111111110111011' '1111111110111100' '1111111110111101' '1111111110111110' '1111111110111111' '0';  
    
    '111110111' '1111111111000000' '1111111111000001' '1111111111000010' '1111111111000011' '1111111111000100' '1111111111000101' '1111111111000110' '1111111111000111' '1111111111001000' '0';  
    
    '111111000' '1111111111001001' '1111111111001010' '1111111111001011' '1111111111001100' '1111111111001101' '1111111111001110' '1111111111001111' '1111111111010000' '1111111111010001' '0';  
    
    '111111001' '1111111111010010' '1111111111010011' '1111111111010100' '1111111111010101' '1111111111010110' '1111111111010111' '1111111111011000' '1111111111011001' '1111111111011010' '0';  
    
    '111111010' '1111111111011011' '1111111111011100' '1111111111011101' '1111111111011110' '1111111111011111' '1111111111100000' '1111111111100001' '1111111111100010' '1111111111100011' '0';  
    
    '11111111001' '1111111111100100' '1111111111100101' '1111111111100110' '1111111111100111' '1111111111101000' '1111111111101001' '1111111111101010' '1111111111101011' '1111111111101100' '0';  
    
    '11111111100000' '1111111111101101' '1111111111101110' '1111111111101111' '1111111111110000' '1111111111110001' '1111111111110010' '1111111111110011' '1111111111110100' '1111111111110101' '0';  
    
    '1111111010' '111111111000011' '1111111111110110' '1111111111110111' '1111111111111000' '1111111111111001' '1111111111111010' '1111111111111011' '1111111111111100' '1111111111111101' '1111111111111111'
};
%% 游长编码
RLC = zeros(1,8); j = 1; len = 0;
for i = 1:63
    if (ACcoes(i) == 0 && len < 15)
        len = len+1;
    else
        RLC(j) = len;
        RLC(j+1) = ACcoes(i);
        j = j+2;
        len = 0;
    end
end
if (ACcoes(63) == 0)
    RLC(j) = 0;
    RLC(j+1) = 0;
end

while (length(RLC) > 2)
    if (RLC(length(RLC)) == 0 && RLC(length(RLC)-2) == 0)
        RLC = RLC(1:length(RLC)-2);
        RLC(length(RLC)-1) = 0;
    else 
        break;
    end
end
% for i = 1:length(RLC)
%     disp(RLC(i));
% end
%% 转化symbol1和symbol2：
code = '';
for i = 1:2:length(RLC)
    ACrunlength = RLC(i);
    ACcoeAmplitude = abs(RLC(i+1));
    ACcoeSize = 0;
    while (ACcoeAmplitude/(2^ACcoeSize) >= 1)
        ACcoeSize = ACcoeSize+1;
    end
    % 对Symbol1做哈夫曼编码
    if (type == 1)
        if (ACrunlength == 0 || ACrunlength == 15)
            S1 = char(T1(ACrunlength+1, ACcoeSize+1));
        else 
            S1 = char(T1(ACrunlength+1, ACcoeSize));
        end
    else
        if (ACrunlength == 0 || ACrunlength == 15)
            S1 = char(T2(ACrunlength+1, ACcoeSize+1));
        else 
            S1 = char(T2(ACrunlength+1, ACcoeSize));
        end
    end
    % 求symbol2(Amplitude)的二进制表示
    if (RLC(i+1) == 0)
        S2 = '';%（x，0）的RLC数对只有symbol1没有symbol2
    elseif (RLC(i+1) > 0)
        S2 = dec2bin(ACcoeAmplitude);
    else 
        S2 = dec2bin(ACcoeAmplitude);
        for j = 1:length(S2)
            if (S2(j) == '1')
                S2(j) = '0';
            else
                S2(j) = '1';
            end
        end
    end
    
    code = [code S1 S2];
end


